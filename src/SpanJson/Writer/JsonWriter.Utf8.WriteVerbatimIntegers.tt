<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;

namespace SpanJson
{
    partial struct JsonWriter<TSymbol>
    {
<#
    for (int i = 4; i <= 32; i++)
    {
        List<string> values = new List<string>();
        List<int> sizes = new List<int>();
        int count = 0;
        var remaining = i;
        var ulongCount = Math.DivRem(remaining, 8, out remaining);
        for (int j = 0; j < ulongCount; j++)
        {
            values.Add("ulong " + (char) (count++ + 'a'));
            sizes.Add(sizeof(ulong));
        }

        var uintCount = Math.DivRem(remaining, 4, out remaining);
        for (int j = 0; j < uintCount; j++)
        {
            values.Add("uint " + (char) (count++ + 'a'));
            sizes.Add(sizeof(uint));
        }

        var ushortCount = Math.DivRem(remaining, 2, out remaining);
        for (int j = 0; j < ushortCount; j++)
        {
            values.Add("ushort " + (char) (count++ + 'a'));
            sizes.Add(sizeof(ushort));
        }

        var byteCount = Math.DivRem(remaining, 1, out remaining);
        for (int j = 0; j < byteCount; j++)
        {
            values.Add("byte " + (char) (count++ + 'a'));
            sizes.Add(sizeof(byte));
        }
        var arguments = string.Join(", ", values);
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteUtf8Verbatim(<#=arguments#>)
        {
            ref var pos = ref _pos;
            Ensure(pos, <#=i#>);

            ref var bStart = ref Utf8PinnableAddress;
<#
            for(int k = 0;k<sizes.Count;k++)
            {
            var currentArgument = (char) (k + 'a');
#>
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref bStart, pos), <#=currentArgument#>);
            pos += <#=sizes[k] #>;
<#
            }
#>
        }

<#
        }
#>
    }
}