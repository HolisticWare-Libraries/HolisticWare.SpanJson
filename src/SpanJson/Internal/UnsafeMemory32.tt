<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var Max = 32;
#>

namespace SpanJson.Internal
{
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    partial class UnsafeMemory32
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void WriteRaw(ref byte destination, ref byte source, int sourceBytesToCopy, ref int idx)
        {
            var nCount = (uint)sourceBytesToCopy;
            switch (nCount)
            {
                case 0u: return;
<# for(var i = 1; i <= Max; i++) { #>
                case <#= i #>u: WriteRaw<#= i #>(ref destination, ref source, ref idx); return;
<# } #>
                default: UnsafeMemory.WriteRawBytes(ref destination, ref source, sourceBytesToCopy, ref idx); return;
            }
        }

<# for(var i = 2; i <= Max; i++) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteRaw<#= i #>(ref byte destination, ref byte src, ref int idx)
        {
            ref byte dest = ref Unsafe.Add(ref destination, (IntPtr)(uint)idx);

<#
int index_0 = 0;
int count_0 = i;
int lengthToExamine_0 = i;

if (lengthToExamine_0 >= 4)
{
    for (int j = 0; j < (count_0 / 4); j++)
    {
        lengthToExamine_0 -= 4;
        if ((4 * j) > 0)
        {
#>
            Unsafe.As<byte, int>(ref Unsafe.Add(ref dest, <#= 4 * j #>)) = Unsafe.As<byte, int>(ref Unsafe.Add(ref src, <#= 4 * j #>));
<#
        }
        else
        {
#>
            Unsafe.As<byte, int>(ref dest) = Unsafe.As<byte, int>(ref src);
<#
        }
        index_0 += 4;
    }
}

if (lengthToExamine_0 >= 2)
{
    count_0 = lengthToExamine_0;
    for (int j = 0; j < (count_0 / 2); j++)
    {
        lengthToExamine_0 -= 2;
        if ((index_0 + 2 * j) > 0)
        {
#>
            Unsafe.As<byte, short>(ref Unsafe.Add(ref dest, <#= index_0 + 2 * j #>)) = Unsafe.As<byte, short>(ref Unsafe.Add(ref src, <#= index_0 + 2 * j #>));
<#
        }
        else
        {
#>
            Unsafe.As<byte, short>(ref dest) = Unsafe.As<byte, short>(ref src);
<#
        }
        index_0 += 2;
    }
}

if (i % 2 != 0)
{
    for (int j = 0; j < lengthToExamine_0; j++)
    {
        if (index_0 > 0)
        {
#>
            Unsafe.AddByteOffset(ref dest, (IntPtr)<#= index_0 #>) = Unsafe.AddByteOffset(ref src, (IntPtr)<#= index_0 #>);
<#
        }
        else
        {
#>
            dest = src;
<#
        }
        index_0 += 1;
    }
}
#>

            idx += <#= i #>;
        }
<# } #>
    }
}
